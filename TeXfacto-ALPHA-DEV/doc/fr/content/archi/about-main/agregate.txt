this::
    date = 2023-10-28


===================================
En plus pour les \packs agrégateurs
===================================

Dans le fichier path::''about.yaml'' d'un \pack agrégateur
((
    Cela n'aurait aucun sens de faire une classe agrégatrice de différentes classes puisque la gestion de la \mef de \docus apporte un lot de complications rendant vite impossible la gestion conjointe de différentes \mefs.
)),
en plus des \infos générales propres à tout \pack, il faut employer un bloc "autonome" yaml::''agregate'' indiquant les dossiers des codes \src des sous-\packs à agréger. Voici un exemple possible
((
    L'ordre utilisé sera aussi celui retenu pour produire \auto^t les \docs.
))
où sont employés des chemins relatifs **toujours à la sauce \unix avec une oblique** et non une onctre-oblique
((
    L'usage de chemins absolus est possible mais fortement déconseillé ! Vous voilà prévenu.
)).

yaml::
    # project:
    #   ...

    agregate:
      - ../upfolder/fict-proj_1/
      - ../upfolder/fict-proj_2/
      - ../upfolder/fict-proj_3/


tip::
    Il est possible de s'appuyer sur \pyglob. Pour l'exemple précédent, s'il n' y a dans le dossier path::''upfolder'' que les dossiers indiqués dans le bloc yaml::''agregate'', on peut plus rapidement faire comme suit où les dossiers repérés seront ordonnés de façon \lexico comme souhaité.

    yaml::
        # project:
        #   ...

        agregate:
          - ../upfolder/fict-proj_*/


caution::
    Ne pas oublier l'oblique final path::''/'' qui indique que les chemins sont ceux de dossiers et non de fichiers.
